const express = require("express");
require("dotenv").config();
const nodemailer = require("nodemailer");
const cors = require("cors");
const {Client} = require("whatsapp-web.js");
const client = new Client();
const port = process.env.PORT;
const app = express();

app.use(cors());
// app.use(express.json({ limit: '25mb' }));
// app.use(express.urlencoded({ limit: '25mb', extended: true }));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));


function sendInquiry(data) {
  return new Promise((resolve, reject) => {
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOSTNAME,
      port: process.env.SMTP_PORT,
      secure: false,
      auth: {
        user: process.env.SMTP_API_ID,
        pass: process.env.SMTP_API_KEY,
      },
    });

    const mail_configs = {
      from: process.env.BOT_MAILID,
      to: process.env.SMTP_API_ID,
      subject: 'Become a Partner',
      html: `<html>
        <head>
          <style>
            body {
              font-family: Arial, sans-serif;
            }
            h2 {
              color: #007BFF;
            }
            strong {
              font-weight: bold;
            }
            p {
              margin-top: 10px;
            }
            p.note {
              color: red;
            }
            h3 {
              font-size: 16px;
              color: #333;
            }
          </style>
        </head>
        <body>
          <h2>Hello Rudraa FinServ,</h2>
          <p><strong>Client Name:</strong> ${data.name}</p>
          <p><strong>Contact Number:</strong> ${data.phone}</p>
          <p><strong>Address:</strong> ${data.address}</p>
          <p><strong>Email:</strong> ${data.email}</p>
          <p><strong>Inquiry:</strong> ${data.message?data.message:''}</p>
          <p class="note"><strong>NOTE:</strong> This email is generated by an automated system, and we kindly request that you refrain from responding to it. Thank you for your understanding.</p>
          <h3>Regards,</h3>
          <p>${data.name}</p>
        </body>
      </html>`,
    };
    
    transporter.sendMail(mail_configs, function (err, info) {
      if (err) {
        console.log(err);
        return reject({ message: "An error has occured" });
      }
      return resolve({ message: "Partner Email sent succesfuly" });
    });
  });
}

function sendContactDetails(data) {
  return new Promise((resolve, reject) => {
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOSTNAME,
      port: process.env.SMTP_PORT,
      secure: false,
      auth: {
        user: process.env.SMTP_API_ID,
        pass: process.env.SMTP_API_KEY,
      },
    });

    const mail_configs = {
      from: process.env.BOT_MAILID,
      to: process.env.SMTP_API_ID,
      subject: data.subject,
      html: `<html>
        <head>
          <style>
            body {
              font-family: Arial, sans-serif;
            }
            h2 {
              color: #007BFF;
            }
            strong {
              font-weight: bold;
            }
            p {
              margin-top: 10px;
            }
            p.note {
              color: red;
            }
            h3 {
              font-size: 16px;
              color: #333;
            }
          </style>
        </head>
        <body>
          <h2>Hello Rudraa FinServ,</h2>
          <p>This mail is regarding <strong><u>${data.subject}</u></strong></p>
          <p><strong>Client Name:</strong> ${data.name}</p>
          <p><strong>Contact Number:</strong> ${data.phone}</p>
          <p><strong>Email:</strong> ${data.email}</p>
          <p><strong>Message:</strong> ${data.message?data.message:''}</p>
          <p class="note"><strong>NOTE:</strong> This email is generated by an automated system, and we kindly request that you refrain from responding to it. Thank you for your understanding.</p>
          <h3>Regards,</h3>
          <p>${data.name}</p>
        </body>
      </html>`,
    };

    transporter.sendMail(mail_configs, function (err, info) {
      if (err) {
        console.log(err);
        return reject({ message: "An error has occured" });
      }
      return resolve({ message: "Contact Email sent succesfuly" });
    });
  });
}

function sendNewsletter(data){
  return new Promise((resolve, reject) => {
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOSTNAME,
      port: process.env.SMTP_PORT,
      secure: false,
      auth: {
        user: process.env.SMTP_API_ID,
        pass: process.env.SMTP_API_KEY,
      },
    });

    const mail_configs = {
      from: process.env.BOT_MAILID,
      to: process.env.SMTP_API_ID,
      subject: 'Newsletter',
      html: `<html>
        <head>
          <style>
            body {
              font-family: Arial, sans-serif;
            }
            h2 {
              color: #007BFF;
            }
            strong {
              font-weight: bold;
            }
            p {
              margin-top: 10px;
            }
            p.note {
              color: red;
            }
            h3 {
              font-size: 16px;
              color: #333;
            }
          </style>
        </head>
        <body>
          <h2>Hello Rudraa FinServ,</h2>
          <br/>
          <p>Please add this email to your Brodcasting channel : <strong><u>${data.email}</u></strong></p>
          <p class="note"><strong>NOTE:</strong> This email is generated by an automated system, and we kindly request that you refrain from responding to it. Thank you for your understanding.</p>
        </body>
      </html>`,
    };

    transporter.sendMail(mail_configs, function (err, info) {
      if (err) {
        console.log(err);
        return reject({ message: "An error has occured" });
      }
      return resolve({ message: "Newsletter Email sent succesfuly" });
    });
  });
}

async function sendWhatsappMsg(client, phoneNumber, message) {
  try {
    client.isRegisteredUser(phoneNumber).then(function(isRegistered) {
      if(isRegistered) {
          client.sendMessage(phoneNumber, message);
      }
  }) 
    console.log('Message sent!');
   
  } catch (err) {
    console.error(err);
  }
}

async function initializeWhatsAppClient() {
  try {
    await client.initialize();
  } catch (error) {
    console.error(error);
  }
}


app.get("/api", (req, res) => {
  res.setHeader("Content-Type", "text/html");
  res.status(200).send(`
    <html>
      <head>
        <style>
         
          body {
            margin: 0;
            padding: 0;
            text-align: center;
            font-family: Arial, sans-serif;
            overflow:hidden;
          }
          h1 {
            animation: rainbow-text 1s linear infinite; 
            font-size: 24px;
          }
          .container{
            display: flex;
            justify-content: center; /* Horizontally center the content */
            align-items: center; /* Vertically center the content */
            height: 100vh; /* Make the container full viewport height */
          
          }
          @keyframes rainbow-text {
            0% { color: #ff0000; } /* Red */
            14% { color: #ff7700; } /* Orange */
            28% { color: #ffff00; } /* Yellow */
            42% { color: #00ff00; } /* Green */
            57% { color: #0077ff; } /* Blue */
            71% { color: #9900ff; } /* Purple */
            85% { color: #ff0077; } /* Pink */
            100% { color: #ff0000; } /* Back to Red */
          }
        </style>
      </head>
      <body>
      <div class="container">
        <h1>Welcome to Rudraa fin services private limited API</h1>
        </div>
      </body>
    </html>
  `);
});

// app.get("/api/send-whatsapp-message", async (req, res) => {
//   try {
   
   
//     initializeWhatsAppClient();
//     const phoneNumber = process.env.WHATSAPP_NUMBER;
//     const message = "Hello there!";
//     await sendWhatsappMsg(client, phoneNumber, message);
//     res.send({ message: "Message sent!" });
//   } catch (error) {
//     res.status(500).send({ error: error.message });
//   }
// });


app.post("/api/become-partner", (req, res) => {
  sendInquiry(req.body)
    .then((response) => res.status(200).send(response.message))
    .catch((error) => res.status(500).send(error.message));
});

app.post("/api/contact", (req, res) => {
  sendContactDetails(req.body)
    .then((response) => res.status(200).send(response.message))
    .catch((error) => res.status(500).send(error.message));
});

app.post("/api/newsletter", (req, res) => {
  sendNewsletter(req.body)
    .then((response) => res.status(200).send(response.message))
    .catch((error) => res.status(500).send(error.message));
});

app.listen(port, () => {
  console.log(
    `Backend app server is running on http://${process.env.API_HOSTNAME}:${port}`
  );
});

